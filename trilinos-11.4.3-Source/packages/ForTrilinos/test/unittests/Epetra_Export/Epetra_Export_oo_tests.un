!*********************************************************************
! ForTrilinos: Object-Oriented Fortran 2003 interface to Trilinos
!                Copyright 2010 Sandia Corporation
!
! Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
! the U.S. Government retains certain rights in this software.
!
! Redistribution and use in source and binary forms, with or without
! modification, are permitted provided that the following conditions are met:
!
! 1. Redistributions of source code must retain the above copyright
!    notice, this list of conditions and the following disclaimer.
!
! 2. Redistributions in binary form must reproduce the above copyright
!    notice, this list of conditions and the following disclaimer in the
!    documentation and/or other materials provided with the distribution.
!
! 3. Neither the name of the Corporation nor the names of the
!    contributors may be used to endorse or promote products derived from
!    this software without specific prior written permission.
!
! THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
! EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
! IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
! PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
! CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
! EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
! PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
! PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
! LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
! NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
! SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
!
! Questions? Contact Karla Morris  (knmorri@sandia.gov)
!*********************************************************************

#include "ForTrilinos_config.h"
#include "runtime_macros.h"

FORTRILINOS_UNITTEST_MODULE_DEF(CLASS_BEING_TESTED)
!    use ForTrilinos_oo_unittest_util
#ifdef HAVE_MPI
    use mpi, only: MPI_COMM_WORLD
    use FEpetra_MpiComm,only:Epetra_MpiComm
#else
    use FEpetra_SerialComm,only:Epetra_SerialComm
#endif
    use FEpetra_Comm,only:Epetra_Comm
    use FEpetra_Map,only:Epetra_Map
    use FEpetra_Vector,only:Epetra_Vector
    use FEpetra_Export, only:Epetra_Export
    use FEpetra_OffsetIndex, only:Epetra_OffsetIndex
    use FEpetra_CrsGraph, only:Epetra_CrsGraph
    use iso_c_binding,only:c_int,c_double,c_char,c_long
    use ForTrilinos_oo_unittest_utils
    use ForTrilinos_error
    use ForTrilinos_enum_wrappers
    use ForTrilinos_enums
FORTRILINOS_UNITTEST_MODULE_BEGIN(CLASS_BEING_TESTED)

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Create)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none 
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: map, map_target
    type(Epetra_Export) :: exporter
    type(FT_Epetra_Export_ID_t) :: Export_ID
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements_target=9
    integer(c_int) :: NumMyElements, i
    integer(c_int), dimension(:), allocatable :: MyGlobalElements
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map_target = Epetra_Map(NumGlobalElements_target,IndexBase,comm))
    if (comm%MyPID()==0) then
      NumMyElements=map_target%NumMyElements()+1
    elseif (comm%MyPID()==comm%NumProc()-1) then
      NumMyElements=map_target%NumMyElements()+1
    else
      NumMyElements=map_target%NumMyElements()+2
    endif
    ECHO(allocate(MyGlobalElements(NumMyElements)))
    if (comm%MyPID()==0) MyGlobalElements=(/1,2,3,4/)
    if (comm%MyPID()==1) MyGlobalElements=(/3,4,5,6,7/)
    if (comm%MyPID()==comm%NumProc()-1) MyGlobalElements=(/6,7,8,9/)
    ECHO(map = Epetra_Map(-1_c_int,MyGlobalElements,IndexBase,comm))
    TEST_EQUALITY(map%NumMyElements(),NumMyElements)
    TEST_EQUALITY(map_target%NumMyElements(),3)
    ECHO(exporter = Epetra_Export(map,map_target))
    ECHO(Export_ID = exporter%get_EpetraExport_ID())
    TEST_EQUALITY(Export_ID%table, FT_Epetra_Export_ID)
    TEST_EQUALITY(Export_ID%index, 0)
    TEST_EQUALITY(Export_ID%is_const, FT_False)
    call exporter%force_finalize()
    call map_target%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, ImportVector_UsingExport)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none 
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: map, map_target
    type(Epetra_Vector) :: x,y
    type(Epetra_Export) :: exporter
    type(Epetra_OffsetIndex) :: index
    integer(FT_Epetra_CombineMode_E_t) :: combine_mode=FT_Epetra_CombineMode_E_Insert
    integer(FT_Epetra_DataAccess_E_t) :: CV = FT_Epetra_DataAccess_E_Copy
    type(Epetra_CrsGraph) :: graph, graph_target
    type(error) :: err
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements_target = 16, i
    integer(c_int) :: Export_Elements=4, NumMyElements_target, NumMyElements
    real(c_double),dimension(:),allocatable :: x_values,y_values
    integer(c_int),dimension(:),allocatable :: MyGlobalElements,MyGlobalElements_target
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ! Creating target map and vector
    ECHO(map_target = Epetra_Map(NumGlobalElements_target,IndexBase,comm))
    ECHO(allocate(MyGlobalElements_target(map_target%NumMyElements())))
    ECHO(MyGlobalElements_target=map_target%MyGlobalElements())
    ECHO(NumMyElements_target=map_target%NumMyElements())
    ECHO(x=Epetra_Vector(map_target))
    ECHO(allocate(x_values(map_target%NumMyElements())))
    do i=1,map_target%NumMyElements()
     x_values(i)=1.0*MyGlobalElements_target(i)
    enddo
    ECHO(call x%ReplaceGlobalValues(x_values,MyGlobalElements_target,err))
    TEST_EQUALITY(err%error_code(),0)
    
    TEST_EQUALITY(size(MyGlobalElements_target),map_target%NumMyElements())

    ! Creating source map, Export object and new vector
    ECHO(NumMyElements=map_target%NumMyElements()+Export_Elements)
    ECHO(allocate(MyGlobalElements(NumMyElements)))
    !Creating MyGlobalElements array for source map
    if (0==comm%MyPID().and.1==comm%NumProc()) then
      ECHO(MyGlobalElements(1:2)=MyGlobalElements_target(NumGlobalElements_target-1:NumGlobalElements_target))
      ECHO(MyGlobalElements(NumMyElements-1)=MyGlobalElements_target(1))
      ECHO(MyGlobalElements(NumMyElements  )=MyGlobalElements_target(2))
    elseif (0==comm%MyPID()) then
      ECHO(MyGlobalElements(1)=NumGlobalElements_target-1)
      ECHO(MyGlobalElements(2)=NumGlobalElements_target)
      ECHO(MyGlobalElements(NumMyElements-1)=MyGlobalElements_target(NumMyElements_target)+1)
      ECHO(MyGlobalElements(NumMyElements  )=MyGlobalElements_target(NumMyElements_target)+2)
    elseif (comm%NumProc()-1==comm%MyPID()) then 
      ECHO(MyGlobalElements(1)=MyGlobalElements_target(1)-2)
      ECHO(MyGlobalElements(2)=MyGlobalElements_target(1)-1)
      ECHO(MyGlobalElements(NumMyElements-1)=1)
      ECHO(MyGlobalElements(NumMyElements)=2)
    else
      ECHO(MyGlobalElements(1)=MyGlobalElements_target(1)-2)
      ECHO(MyGlobalElements(2)=MyGlobalElements_target(1)-1)
      ECHO(MyGlobalElements(NumMyElements-1)=MyGlobalElements_target(NumMyElements_target)+1)
      ECHO(MyGlobalElements(NumMyElements  )=MyGlobalElements_target(NumMyElements_target)+2)
    endif
    ECHO(MyGlobalElements(3:NumMyElements-2)=MyGlobalElements_target(1:NumMyElements_target))
    ! Creating source map
    ECHO(map = Epetra_Map(-1_c_int,MyGlobalElements,IndexBase,comm))

    ECHO(exporter = Epetra_Export(map,map_target))
    ECHO(graph = Epetra_CrsGraph(CV,map,NumMyElements,.false.))
    ECHO(graph_target = Epetra_CrsGraph(CV,map_target,NumMyElements_target,.false.))
    ECHO(index=Epetra_OffsetIndex(graph,graph_target,exporter))
    ECHO(y=Epetra_Vector(map))
    ECHO(call y%import(x,exporter,combine_mode,index))
    ECHO(allocate(y_values(map%NumMyElements())))
    ECHO(y_values=y%ExtractCopy(err))
    TEST_EQUALITY(err%error_code(),0)
    if (comm%MyPID()==0) then
      TEST_EQUALITY(y_values(1),NumGlobalElements_target-1)
      TEST_EQUALITY(y_values(2),NumGlobalElements_target)
      TEST_EQUALITY(y_values(NumMyElements-1),NumMyElements_target+1)
      TEST_EQUALITY(y_values(NumMyElements),NumMyElements_target+2)
    elseif (comm%MyPID()==0.and.1==comm%NumProc()) then
      TEST_EQUALITY(y_values(1),NumGlobalElements_target-1)
      TEST_EQUALITY(y_values(2),NumGlobalElements_target)
      TEST_EQUALITY(y_values(NumMyElements-1),1)
      TEST_EQUALITY(y_values(NumMyElements),2)
    elseif (comm%MyPID()==comm%NumProc()-1) then
      TEST_EQUALITY(y_values(1),NumGlobalElements_target-NumMyElements_target-1)
      TEST_EQUALITY(y_values(2),NumGlobalElements_target-NumMyElements_target)
      TEST_EQUALITY(y_values(map%NumMyElements()-1),1)
      TEST_EQUALITY(y_values(map%NumMyElements()),2)
    else
      TEST_EQUALITY(y_values(1),(MyGlobalElements_target(1)-2))
      TEST_EQUALITY(y_values(2),(MyGlobalElements_target(1)-1))
      TEST_EQUALITY(y_values(NumMyElements-1),(MyGlobalElements_target(NumMyElements_target)+1))
      TEST_EQUALITY(y_values(NumMyElements),(MyGlobalElements_target(NumMyElements_target)+2))
    endif
    do i=1,map_target%NumMyElements()
     TEST_EQUALITY(y_values(i+2),x_values(i))
    enddo
    call exporter%force_finalize()
    call x%force_finalize()
    call y%force_finalize()
    call graph_target%force_finalize()
    call graph%force_finalize()
    call map_target%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

FORTRILINOS_UNITTEST_MODULE_END(CLASS_BEING_TESTED)
