!*********************************************************************
! ForTrilinos: Object-Oriented Fortran 2003 interface to Trilinos
!                Copyright 2010 Sandia Corporation
!
! Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
! the U.S. Government retains certain rights in this software.
!
! Redistribution and use in source and binary forms, with or without
! modification, are permitted provided that the following conditions are met:
!
! 1. Redistributions of source code must retain the above copyright
!    notice, this list of conditions and the following disclaimer.
!
! 2. Redistributions in binary form must reproduce the above copyright
!    notice, this list of conditions and the following disclaimer in the
!    documentation and/or other materials provided with the distribution.
!
! 3. Neither the name of the Corporation nor the names of the
!    contributors may be used to endorse or promote products derived from
!    this software without specific prior written permission.
!
! THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
! EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
! IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
! PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
! CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
! EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
! PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
! PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
! LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
! NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
! SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
!
! Questions? Contact Karla Morris  (knmorri@sandia.gov)
!                    Damian Rouson (rouson@sandia.gov)
!*********************************************************************

#include "ForTrilinos_config.h"
#include "runtime_macros.h"

FORTRILINOS_UNITTEST_MODULE_DEF(CLASS_BEING_TESTED)
    use FEpetra_SerialComm,only:Epetra_SerialComm
    use FEpetra_Comm,only:Epetra_Comm
    use iso_c_binding,only:c_int,c_double,c_char,c_long
    use ForTrilinos_error
FORTRILINOS_UNITTEST_MODULE_BEGIN(CLASS_BEING_TESTED)

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Create)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
    type(Epetra_SerialComm):: comm
    type(FT_Epetra_SerialComm_ID_t):: serial_commID
    type(FT_Epetra_Comm_ID_t) ::commID
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(serial_commID = comm%get_EpetraSerialComm_ID())
    ECHO(commID = comm%get_EpetraComm_ID())
    TEST_EQUALITY(serial_commID%table, FT_Epetra_SerialComm_ID)
    TEST_EQUALITY(serial_commID%index, 0)
    TEST_EQUALITY(serial_commID%is_const, FT_False)
    TEST_EQUALITY(commID%table, FT_Epetra_Comm_ID)
    TEST_EQUALITY(commID%index, 0)
    TEST_EQUALITY(commID%is_const, FT_False)
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Duplicate)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
    type(Epetra_SerialComm):: comm,comm2
    type(FT_Epetra_SerialComm_ID_t):: serial_comm2ID
    type(FT_Epetra_Comm_ID_t) ::comm2ID
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(comm2 = Epetra_SerialComm(comm))
    ECHO(serial_comm2ID = comm2%get_EpetraSerialComm_ID())
    ECHO(comm2ID = comm2%get_EpetraComm_ID())
    TEST_EQUALITY(serial_comm2ID%table, FT_Epetra_SerialComm_ID)
    TEST_EQUALITY(serial_comm2ID%index, 1)
    TEST_EQUALITY(comm2ID%table, FT_Epetra_Comm_ID)
    TEST_EQUALITY(comm2ID%index, 1)
    call comm%force_finalize()
    call comm2%force_finalize()
  FORTRILINOS_UNITTEST_END
  
  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Destroy)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
    type(Epetra_SerialComm):: comm
    type(FT_Epetra_SerialComm_ID_t):: serial_commID
    type(FT_Epetra_Comm_ID_t) ::commID
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(call comm%force_finalize())
    ECHO(serial_commID = comm%get_EpetraSerialComm_ID())
    ECHO(commID = comm%get_EpetraComm_ID())
    TEST_EQUALITY(serial_commID%table, FT_Invalid_ID)
    TEST_EQUALITY(serial_commID%index, -1)
    TEST_EQUALITY(commID%table, FT_Invalid_ID)
    TEST_EQUALITY(commID%index, -1)
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Barrier)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
    type(Epetra_SerialComm):: comm
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(call comm%barrier())
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Broadcast_Double)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
    type(Epetra_SerialComm):: comm
    integer(c_int):: root,count
    real(c_double),allocatable :: MyVals(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(root = comm%MyPID())
    ECHO(count = 6)
    ECHO(MyVals = (/4.6,2.6,3.1,7.7,-0.5,1.0/))
    ECHO(call comm%broadcast(MyVals,root,ierror))
    TEST_EQUALITY(ierror%error_code(),0) 
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END


  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Broadcast_Int)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
    type(Epetra_SerialComm):: comm
    integer(c_int):: root,count
    integer(c_int),allocatable :: MyVals(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(root = comm%MyPID())
    ECHO(count = 6)
    ECHO(MyVals = (/4,2,3,7,-5,1/))
    ECHO(call comm%broadcast(MyVals,root,ierror))
    TEST_EQUALITY(ierror%error_code(),0) 
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Broadcast_Long)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none 
    type(Epetra_SerialComm):: comm
    integer(c_int):: root,count
    integer(c_long),allocatable :: MyVals(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(root = comm%MyPID())
    ECHO(count = 6)
    ECHO(MyVals = (/46,26,31,77,-50,10/))
    ECHO(call comm%broadcast_long(MyVals,root,ierror))
    TEST_EQUALITY(ierror%error_code(),0) 
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Broadcast_Char)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none 
    type(Epetra_SerialComm):: comm
    integer(c_int):: root,count
    character(kind=c_char),allocatable :: MyVals(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(root = comm%MyPID())
    ECHO(count = 6)
    ECHO(MyVals = (/'a','b','c','d','o','i'/))
    ECHO(call comm%broadcast(MyVals,root,ierror))
    TEST_EQUALITY(ierror%error_code(),0) 
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, GatherAll_Double)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none 
    type(Epetra_SerialComm):: comm
    integer(c_int):: count,i
    real(c_double),allocatable :: MyVals(:)
    real(c_double),allocatable :: AllVals(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(count = 6)
    ECHO(MyVals = (/4.6,2.6,3.1,7.7,-0.5,1.0/))
    ECHO(allocate(AllVals(size(MyVals))))
    ECHO(call comm%GatherAll(MyVals,AllVals,ierror))
    TEST_EQUALITY(ierror%error_code(),0) 
    do i=1,count
      if (MyVals(i) /= AllVals(i)) success=.false.
    enddo
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

 FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, GatherAll_Int)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none
    type(Epetra_SerialComm):: comm
    integer(c_int):: count,i
    integer(c_int),allocatable :: MyVals(:)
    integer(c_int),allocatable :: AllVals(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(count = 6)
    ECHO(MyVals = (/4,2,3,7,-5,1/))
    ECHO(allocate(AllVals(size(MyVals))))
    ECHO(call comm%GatherAll(MyVals,AllVals,ierror))
    TEST_EQUALITY(ierror%error_code(),0)
    do i=1,count
      if (MyVals(i) /= AllVals(i)) success=.false.
    enddo
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, GatherAll_Long)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none
    type(Epetra_SerialComm):: comm
    integer(c_int):: count,i
    integer(c_long),allocatable :: MyVals(:)
    integer(c_long),allocatable :: AllVals(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(count = 6)
    ECHO(MyVals = (/49,22,37,73,-57,18/))
    ECHO(allocate(AllVals(size(MyVals))))
    ECHO(call comm%gather_long(MyVals,AllVals,ierror))
    TEST_EQUALITY(ierror%error_code(),0)
    do i=1,count
      if (MyVals(i) /= AllVals(i)) success=.false.
    enddo
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, SumAll_Double)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none
    type(Epetra_SerialComm):: comm
    integer(c_int):: count,i
    real(c_double),allocatable :: PartialSums(:)
    real(c_double),allocatable :: GlobalSums(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(count = 6)
    ECHO(PartialSums = (/4.9,2.2,3.7,7.3,-5.7,1.8/))
    ECHO(allocate(GlobalSums(size(PartialSums))))
    ECHO(call comm%SumAll(PartialSums,GlobalSums,ierror))
    TEST_EQUALITY(ierror%error_code(),0)
    do i=1,count
      if (PartialSums(i) /= GlobalSums(i)) success=.false.
    enddo
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

 FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, SumAll_Int)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none
    type(Epetra_SerialComm):: comm
    integer(c_int):: count,i
    integer(c_int),allocatable :: PartialSums(:)
    integer(c_int),allocatable :: GlobalSums(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(count = 6)
    ECHO(PartialSums = (/4,2,3,7,-5,1/))
    ECHO(allocate(GlobalSums(size(PartialSums))))
    ECHO(call comm%SumAll(PartialSums,GlobalSums,ierror))
    TEST_EQUALITY(ierror%error_code(),0)
    do i=1,count
      if (PartialSums(i) /= GlobalSums(i)) success=.false.
    enddo
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, SumAll_Long)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none
    type(Epetra_SerialComm):: comm
    integer(c_int):: count,i
    integer(c_long),allocatable :: PartialSums(:)
    integer(c_long),allocatable :: GlobalSums(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(count = 6)
    ECHO(PartialSums = (/49,22,37,73,-57,18/))
    ECHO(allocate(GlobalSums(size(PartialSums))))
    ECHO(call comm%sum_long(PartialSums,GlobalSums,ierror))
    TEST_EQUALITY(ierror%error_code(),0)
    do i=1,count
      if (PartialSums(i) /= GlobalSums(i)) success=.false.
    enddo
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

 FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED,MaxAll_Double)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none
    type(Epetra_SerialComm):: comm
    integer(c_int):: count,i
    real(c_double),allocatable :: PartialMaxs(:)
    real(c_double),allocatable :: GlobalMaxs(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(count = 6)
    ECHO(PartialMaxs = (/4.9,2.2,3.7,7.3,-5.7,1.8/))
    ECHO(allocate(GlobalMaxs(size(PartialMaxs))))
    ECHO(call comm%MaxAll(PartialMaxs,GlobalMaxs,ierror))
    TEST_EQUALITY(ierror%error_code(),0)
    do i=1,count
      if (PartialMaxs(i) /= GlobalMaxs(i)) success=.false.
    enddo
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED,MaxAll_Int)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none
    type(Epetra_SerialComm):: comm
    integer(c_int):: count,i
    integer(c_int),allocatable :: PartialMaxs(:)
    integer(c_int),allocatable :: GlobalMaxs(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(count = 6)
    ECHO(PartialMaxs = (/4,2,3,7,-5,1/))
    ECHO(allocate(GlobalMaxs(size(PartialMaxs))))
    ECHO(call comm%MaxAll(PartialMaxs,GlobalMaxs,ierror))
    TEST_EQUALITY(ierror%error_code(),0)
    do i=1,count
      if (PartialMaxs(i) /= GlobalMaxs(i)) success=.false.
    enddo
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED,MaxAll_Long)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none
    type(Epetra_SerialComm):: comm
    integer(c_int):: count,i
    integer(c_long),allocatable :: PartialMaxs(:)
    integer(c_long),allocatable :: GlobalMaxs(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(count = 6)
    ECHO(PartialMaxs = (/49,22,37,73,-57,18/))
    ECHO(allocate(GlobalMaxs(size(PartialMaxs))))
    ECHO(call comm%max_long(PartialMaxs,GlobalMaxs,ierror))
    TEST_EQUALITY(ierror%error_code(),0)
    do i=1,count
      if (PartialMaxs(i) /= GlobalMaxs(i)) success=.false.
    enddo
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED,MinAll_Double)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none
    type(Epetra_SerialComm):: comm
    integer(c_int):: count,i
    real(c_double),allocatable :: PartialMins(:)
    real(c_double),allocatable :: GlobalMins(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(count = 6)
    ECHO(PartialMins = (/4.9,2.2,3.7,7.3,-5.7,1.8/))
    ECHO(allocate(GlobalMins(size(PartialMins))))
    ECHO(call comm%MinAll(PartialMins,GlobalMins,ierror))
    TEST_EQUALITY(ierror%error_code(),0)
    do i=1,count
      if (PartialMins(i) /= GlobalMins(i)) success=.false.
    enddo
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED,MinAll_Int)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none
    type(Epetra_SerialComm):: comm
    integer(c_int):: count,i
    integer(c_int),allocatable :: PartialMins(:)
    integer(c_int),allocatable :: GlobalMins(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(count = 6)
    ECHO(PartialMins = (/4,2,3,7,-5,1/))
    ECHO(allocate(GlobalMins(size(PartialMins))))
    ECHO(call comm%MinAll(PartialMins,GlobalMins,ierror))
    TEST_EQUALITY(ierror%error_code(),0)
    do i=1,count
      if (PartialMins(i) /= GlobalMins(i)) success=.false.
    enddo
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED,MinAll_Long)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none
    type(Epetra_SerialComm):: comm
    integer(c_int):: count,i
    integer(c_long),allocatable :: PartialMins(:)
    integer(c_long),allocatable :: GlobalMins(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(count = 6)
    ECHO(PartialMins = (/49,22,37,73,-57,18/))
    ECHO(allocate(GlobalMins(size(PartialMins))))
    ECHO(call comm%max_long(PartialMins,GlobalMins,ierror))
    TEST_EQUALITY(ierror%error_code(),0)
    do i=1,count
      if (PartialMins(i) /= GlobalMins(i)) success=.false.
    enddo
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED,ScanSum_Double)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none
    type(Epetra_SerialComm):: comm
    integer(c_int):: count,i
    real(c_double),allocatable :: MyVals(:)
    real(c_double),allocatable :: scan_sums(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(count = 6)
    ECHO(MyVals = (/4.9,2.2,3.7,7.3,-5.7,1.8/))
    ECHO(allocate(scan_sums(size(MyVals))))
    ECHO(call comm%ScanSum(MyVals,scan_sums,ierror))
    TEST_EQUALITY(ierror%error_code(),0)
    do i=1,count
      if (MyVals(i) /= scan_sums(i)) success=.false.
    enddo
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED,ScanSum_Int)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none
    type(Epetra_SerialComm):: comm
    integer(c_int):: count,i
    integer(c_int),allocatable :: MyVals(:)
    integer(c_int),allocatable :: scan_sums(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(count = 6)
    ECHO(MyVals = (/9,2,3,7,-5,1/))
    ECHO(allocate(scan_sums(size(MyVals))))
    ECHO(call comm%ScanSum(MyVals,scan_sums,ierror))
    TEST_EQUALITY(ierror%error_code(),0)
    do i=1,count
      if (MyVals(i) /= scan_sums(i)) success=.false.
    enddo
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED,ScanSum_Long)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none
    type(Epetra_SerialComm):: comm
    integer(c_int):: count,i
    integer(c_long),allocatable :: MyVals(:)
    integer(c_long),allocatable :: scan_sums(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(count = 6)
    ECHO(MyVals = (/49,22,37,73,-57,18/))
    ECHO(allocate(scan_sums(size(MyVals))))
    ECHO(call comm%ScanSum_long(MyVals,scan_sums,ierror))
    TEST_EQUALITY(ierror%error_code(),0)
    do i=1,count
      if (MyVals(i) /= scan_sums(i)) success=.false.
    enddo
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED,MyPID)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none
    type(Epetra_SerialComm):: comm
    integer(c_int):: root 
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(root =  comm%MyPID())
    TEST_EQUALITY(root,0)
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED,NumProc)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none
    type(Epetra_SerialComm):: comm
    integer(c_int):: proc 
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(proc =  comm%NumProc())
    TEST_EQUALITY(proc,1)
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END
 
FORTRILINOS_UNITTEST_MODULE_END(CLASS_BEING_TESTED)
