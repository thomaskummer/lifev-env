!*********************************************************************
! ForTrilinos: Object-Oriented Fortran 2003 interface to Trilinos
!                Copyright 2010 Sandia Corporation
!
! Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
! the U.S. Government retains certain rights in this software.
!
! Redistribution and use in source and binary forms, with or without
! modification, are permitted provided that the following conditions are met:
!
! 1. Redistributions of source code must retain the above copyright
!    notice, this list of conditions and the following disclaimer.
!
! 2. Redistributions in binary form must reproduce the above copyright
!    notice, this list of conditions and the following disclaimer in the
!    documentation and/or other materials provided with the distribution.
!
! 3. Neither the name of the Corporation nor the names of the
!    contributors may be used to endorse or promote products derived from
!    this software without specific prior written permission.
!
! THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
! EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
! IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
! PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
! CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
! EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
! PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
! PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
! LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
! NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
! SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
!
! Questions? Contact Xiaofeng Xu (xlxif@yahoo.com)
!*********************************************************************

#include "ForTrilinos_config.h"
#include "runtime_macros.h"

FORTRILINOS_UNITTEST_MODULE_DEF(CLASS_BEING_TESTED)
#ifdef HAVE_MPI
    use mpi, only: MPI_COMM_WORLD
    use FEpetra_MpiComm,only:Epetra_MpiComm
#else
    use FEpetra_SerialComm,only:Epetra_SerialComm
#endif
    use FEpetra_Comm,only:Epetra_Comm
    use FEpetra_Map,only:Epetra_Map
    use FEpetra_BlockMap, only: Epetra_BlockMap
    use FEpetra_Vector,only:Epetra_Vector
    use FEpetra_MultiVector, only:Epetra_MultiVector
    use FEpetra_CrsMatrix,only:Epetra_CrsMatrix
    use iso_c_binding,only:c_int,c_double,c_char,c_long
    use ForTrilinos_oo_unittest_utils
    use ForTrilinos_error
    use ForTrilinos_enum_wrappers
FORTRILINOS_UNITTEST_MODULE_BEGIN(CLASS_BEING_TESTED)
FORTRILINOS_UNITTEST_SWITCH_BEGIN(CLASS_BEING_TESTED)

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Create_VarPerRow)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A
    type(FT_Epetra_CrsMatrix_ID_t) :: CrsMatrix_ID
    type(FT_Epetra_RowMatrix_ID_t) :: RowMatrix_ID
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int),dimension(:),allocatable :: NumIndicesPerRow
    NumIndicesPerRow=(/3,2,1,4/)
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    ECHO(CrsMatrix_ID = A%get_EpetraCrsMatrix_ID())
    ECHO(RowMatrix_ID = A%get_EpetraRowMatrix_ID())
    TEST_EQUALITY(CrsMatrix_ID%table, FT_Epetra_CrsMatrix_ID)
    TEST_EQUALITY(CrsMatrix_ID%index, 0)
    TEST_EQUALITY(CrsMatrix_ID%is_const, FT_False)
    TEST_EQUALITY(RowMatrix_ID%table, FT_Epetra_RowMatrix_ID)
    TEST_EQUALITY(RowMatrix_ID%index, 0)
    TEST_EQUALITY(RowMatrix_ID%is_const, FT_False)
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Create_VarPerRowWithColMap)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: row_map, col_map
    type(Epetra_CrsMatrix) :: A
    type(FT_Epetra_CrsMatrix_ID_t) :: CrsMatrix_ID
    type(FT_Epetra_RowMatrix_ID_t) :: RowMatrix_ID
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int),dimension(:),allocatable :: NumIndicesPerRow
    NumIndicesPerRow=(/3,2,1,4/)
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(row_map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(col_map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,row_map,col_map,NumIndicesPerRow,.false.))
    ECHO(CrsMatrix_ID = A%get_EpetraCrsMatrix_ID())
    ECHO(RowMatrix_ID = A%get_EpetraRowMatrix_ID())
    TEST_EQUALITY(CrsMatrix_ID%table, FT_Epetra_CrsMatrix_ID)
    TEST_EQUALITY(CrsMatrix_ID%index, 0)
    TEST_EQUALITY(CrsMatrix_ID%is_const, FT_False)
    TEST_EQUALITY(RowMatrix_ID%table, FT_Epetra_RowMatrix_ID)
    TEST_EQUALITY(RowMatrix_ID%index, 0)
    TEST_EQUALITY(RowMatrix_ID%is_const, FT_False)
    call A%force_finalize()
    call row_map%force_finalize()
    call col_map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Create)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A
    type(FT_Epetra_CrsMatrix_ID_t) :: CrsMatrix_ID
    type(FT_Epetra_RowMatrix_ID_t) :: RowMatrix_ID
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 5
    integer(c_int) :: NumIndicesPerRow=3
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    ECHO(CrsMatrix_ID = A%get_EpetraCrsMatrix_ID())
    ECHO(RowMatrix_ID = A%get_EpetraRowMatrix_ID())
    TEST_EQUALITY(CrsMatrix_ID%table, FT_Epetra_CrsMatrix_ID)
    TEST_EQUALITY(CrsMatrix_ID%index, 0)
    TEST_EQUALITY(CrsMatrix_ID%is_const, FT_False)
    TEST_EQUALITY(RowMatrix_ID%table, FT_Epetra_RowMatrix_ID)
    TEST_EQUALITY(RowMatrix_ID%index, 0)
    TEST_EQUALITY(RowMatrix_ID%is_const, FT_False)
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Create_WithColMap)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: row_map, col_map
    type(Epetra_CrsMatrix) :: A
    type(FT_Epetra_CrsMatrix_ID_t) :: CrsMatrix_ID
    type(FT_Epetra_RowMatrix_ID_t) :: RowMatrix_ID
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 5
    integer(c_int) :: NumIndicesPerRow=3
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(row_map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(col_map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,row_map,col_map,NumIndicesPerRow,.false.))
    ECHO(CrsMatrix_ID = A%get_EpetraCrsMatrix_ID())
    ECHO(RowMatrix_ID = A%get_EpetraRowMatrix_ID())
    TEST_EQUALITY(CrsMatrix_ID%table, FT_Epetra_CrsMatrix_ID)
    TEST_EQUALITY(CrsMatrix_ID%index, 0)
    TEST_EQUALITY(CrsMatrix_ID%is_const, FT_False)
    TEST_EQUALITY(RowMatrix_ID%table, FT_Epetra_RowMatrix_ID)
    TEST_EQUALITY(RowMatrix_ID%index, 0)
    TEST_EQUALITY(RowMatrix_ID%is_const, FT_False)
    call A%force_finalize()
    call row_map%force_finalize()
    call col_map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END


  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Duplicate)
  FORTRILINOS_UNITTEST_BEGIN
 use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(error) :: err
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A,A1
    type(FT_Epetra_CrsMatrix_ID_t) :: CrsMatrix_ID
    type(FT_Epetra_RowMatrix_ID_t) :: RowMatrix_ID
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int),dimension(:),allocatable :: NumIndicesPerRow
    NumIndicesPerRow=(/3,2,1,4/)
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    ECHO(call A%PutScalar(1._c_double,err))
    TEST_EQUALITY(err%error_code(),0)
    ECHO(call A%FillComplete(.true.,err))
    TEST_EQUALITY(err%error_code(),0)
    ECHO(A1 = Epetra_CrsMatrix(A))
    ECHO(CrsMatrix_ID = A1%get_EpetraCrsMatrix_ID())
    ECHO(RowMatrix_ID = A1%get_EpetraRowMatrix_ID())
    TEST_EQUALITY(CrsMatrix_ID%table, FT_Epetra_CrsMatrix_ID)
    TEST_EQUALITY(CrsMatrix_ID%index, 1)
    TEST_EQUALITY(CrsMatrix_ID%is_const, FT_False)
    TEST_EQUALITY(RowMatrix_ID%table, FT_Epetra_RowMatrix_ID)
    TEST_EQUALITY(RowMatrix_ID%index, 1)
    TEST_EQUALITY(RowMatrix_ID%is_const, FT_False)
    call A1%force_finalize()
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END
  
  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Destroy)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A
    type(FT_Epetra_CrsMatrix_ID_t) :: CrsMatrix_ID
    type(FT_Epetra_RowMatrix_ID_t) :: RowMatrix_ID
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int),dimension(:),allocatable :: NumIndicesPerRow
    NumIndicesPerRow=(/3,2,1,4/)
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    ECHO(call A%force_finalize())
    ECHO(CrsMatrix_ID = A%get_EpetraCrsMatrix_ID())
    ECHO(RowMatrix_ID = A%get_EpetraRowMatrix_ID())
    TEST_EQUALITY(CrsMatrix_ID%table, FT_Invalid_ID)
    TEST_EQUALITY(CrsMatrix_ID%index, -1)
    TEST_EQUALITY(RowMatrix_ID%table, FT_Invalid_ID)
    TEST_EQUALITY(RowMatrix_ID%index, -1)
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, RowMap)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: map,row_map
    type(Epetra_CrsMatrix) :: A
    type(FT_Epetra_Map_ID_t) :: Map_ID,RowMap_ID
    type(FT_Epetra_BlockMap_ID_t) :: BlockMap_ID,RowBlockMap_ID
    type(Epetra_Vector) :: vec
    type(FT_Epetra_Vector_ID_t) :: Vec_ID
    type(FT_Epetra_MultiVector_ID_t) :: MVec_ID
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int),dimension(:),allocatable :: NumIndicesPerRow
    NumIndicesPerRow=(/3,2,1,4/)
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    ECHO(row_map=A%RowMap())
    ECHO(Map_ID=map%get_EpetraMap_ID())
    ECHO(BlockMap_ID=map%get_EpetraBlockMap_ID())
    ECHO(RowMap_ID=row_map%get_EpetraMap_ID())
    ECHO(RowBlockMap_ID=row_map%get_EpetraBlockMap_ID())
    TEST_EQUALITY(Map_ID%table,FT_Epetra_Map_ID)
    TEST_EQUALITY(Map_ID%index,0)
    TEST_EQUALITY(Map_ID%is_const,FT_FALSE)
    TEST_EQUALITY(BlockMap_ID%table,FT_Epetra_BlockMap_ID)
    TEST_EQUALITY(BlockMap_ID%index,0)
    TEST_EQUALITY(BlockMap_ID%is_const,FT_FALSE)
    TEST_EQUALITY(RowMap_ID%table,FT_Epetra_Map_ID)
    TEST_EQUALITY(RowMap_ID%index,0)
    TEST_EQUALITY(RowMap_ID%is_const,FT_TRUE)
    TEST_EQUALITY(RowBlockMap_ID%table,FT_Epetra_BlockMap_ID)
    TEST_EQUALITY(RowBlockMap_ID%index,0)
    TEST_EQUALITY(RowBlockMap_ID%is_const,FT_TRUE)
    call row_map%force_finalize()
    ECHO(vec=Epetra_Vector(A%RowMap()))
    ECHO(Vec_ID=vec%get_EpetraVector_ID())
    ECHO(MVec_ID=vec%get_EpetraMultiVector_ID())
    TEST_EQUALITY(Vec_ID%table,FT_Epetra_Vector_ID)
    TEST_EQUALITY(Vec_ID%index,0)
    TEST_EQUALITY(MVec_ID%table,FT_Epetra_MultiVector_ID)
    TEST_EQUALITY(MVec_ID%index,0)
    call vec%force_finalize()
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, RowMatrixRowMap)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: map,row_matrix_row_map
    type(Epetra_CrsMatrix) :: A
    type(FT_Epetra_Map_ID_t) :: Map_ID,RowMatrixRowMap_ID
    type(FT_Epetra_BlockMap_ID_t) :: BlockMap_ID,BlockRowMatrixRowMap_ID
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int),dimension(:),allocatable :: NumIndicesPerRow
    NumIndicesPerRow=(/3,2,1,4/)
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    ECHO(row_matrix_row_map=A%RowMatrixRowMap())
    ECHO(Map_ID=map%get_EpetraMap_ID())
    ECHO(BlockMap_ID=map%get_EpetraBlockMap_ID())
    ECHO(RowMatrixRowMap_ID=row_matrix_row_map%get_EpetraMap_ID())
    ECHO(BlockRowMatrixRowMap_ID=row_matrix_row_map%get_EpetraBlockMap_ID())
    TEST_EQUALITY(Map_ID%table,FT_Epetra_Map_ID)
    TEST_EQUALITY(Map_ID%index,0)
    TEST_EQUALITY(Map_ID%is_const,FT_FALSE)
    TEST_EQUALITY(BlockMap_ID%table,FT_Epetra_BlockMap_ID)
    TEST_EQUALITY(BlockMap_ID%index,0)
    TEST_EQUALITY(BlockMap_ID%is_const,FT_FALSE)
    TEST_EQUALITY(RowMatrixRowMap_ID%table,FT_Epetra_Map_ID)
    TEST_EQUALITY(RowMatrixRowMap_ID%index,0)
    TEST_EQUALITY(RowMatrixRowMap_ID%is_const,FT_TRUE)
    TEST_EQUALITY(BlockRowMatrixRowMap_ID%table,FT_Epetra_BlockMap_ID)
    TEST_EQUALITY(BlockRowMatrixRowMap_ID%index,0)
    TEST_EQUALITY(BlockRowMatrixRowMap_ID%is_const,FT_TRUE)
    call row_matrix_row_map%force_finalize()
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END


  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, ExtractGlobalRowCopy)
  FORTRILINOS_UNITTEST_BEGIN
 use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(error) :: err
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4 
    integer(c_int) :: i, NumIndicesPerRow
    integer(c_int) :: NumMyElements
    integer(c_int), dimension(:), allocatable :: MyGlobalElements 
    real(c_double), dimension(2)  :: scalar
    real(c_double), allocatable, dimension(:)  :: values
    integer(c_int), dimension(2)  :: col
    integer(c_int), allocatable, dimension(:)  :: indices
    integer(c_int) :: global_row, length
    NumIndicesPerRow=3
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    scalar(1) = -1.0
    scalar(2) = 1.0
    col(1)=2
    col(2)=3
    NumMyElements=map%NumMyElements()
    Allocate (MyGlobalElements(NumMyElements))
    MyGlobalElements=map%MyGlobalElements()
    do i=1,NumMyElements
      ECHO(call A%InsertGlobalValues(MyGlobalElements(i),scalar, col,err))
      TEST_EQUALITY(err%error_code(),0)
    end do
    ECHO(call A%FillComplete(.true.,err))
    TEST_EQUALITY(err%error_code(),0)
    global_row=4
    length=2
    do i=1, NumMyElements
      if (MyGlobalElements(i)==global_row) then
        ECHO(call A%ExtractGlobalRowCopy(global_row,values,indices,err))
        TEST_EQUALITY(scalar(1), values(1))
        TEST_EQUALITY(scalar(2), values(2))
        TEST_EQUALITY(col(1), indices(1)) 
        TEST_EQUALITY(col(2), indices(2))
      end if
    end do
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED,MaxNumEntries) 
  FORTRILINOS_UNITTEST_BEGIN
 use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(error) :: err
    type(Epetra_CrsMatrix) :: A
    type(Epetra_Map) :: map
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int) :: i
    integer(c_int),dimension(:),allocatable :: NumIndicesPerRow
    integer(c_int) :: max_entries, max_NumIndices
    integer(c_int) :: NumMyElements
    integer(c_int), dimension(:), allocatable :: MyGlobalElements
    real(c_double), dimension(3)  :: scalar
    integer(c_int), dimension(3)  :: col
    integer(c_int) :: num_entries
    NumIndicesPerRow=(/3,2,1,3/) 
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    scalar(1) = -1.0
    scalar(2) = 1.0
    scalar(3) = 2.0
    col(1)=2
    col(2)=3
    col(3)=4
    NumMyElements=map%NumMyElements()
    Allocate (MyGlobalElements(NumMyElements))
    MyGlobalElements=map%MyGlobalElements()
    max_NumIndices=-1
    do i=1,NumMyElements
      num_entries=NumIndicesPerRow(MyGlobalElements(i))
      if (NumIndicesPerRow(MyGlobalElements(i)) > max_NumIndices) max_NumIndices=NumIndicesPerRow(MyGlobalElements(i))
      ECHO(call A%InsertGlobalValues(MyGlobalElements(i),scalar(1:num_entries), col(1:num_entries), err))
      TEST_EQUALITY(err%error_code(),0)
    end do
    ECHO(call A%FillComplete(.true.,err))
    TEST_EQUALITY(err%error_code(),0)
    max_entries = A%MaxNumEntries()
    TEST_EQUALITY(max_entries,max_NumIndices)
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED,NumMyRowEntries)
  FORTRILINOS_UNITTEST_BEGIN
 use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(error) :: err
    type(Epetra_CrsMatrix) :: A
    type(Epetra_Map) :: map
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int) :: i
    integer(c_int),dimension(:),allocatable :: NumIndicesPerRow
    integer(c_int) :: num_my_row_entries
    integer(c_int) :: NumMyElements
    integer(c_int), dimension(:), allocatable :: MyGlobalElements
    real(c_double), dimension(3)  :: scalar
    integer(c_int), dimension(3)  :: col
    integer(c_int) :: num_entries
    NumIndicesPerRow=(/3,2,1,3/)
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    scalar(1) = -1.0
    scalar(2) = 1.0
    scalar(3) = 2.0
    col(1)=2
    col(2)=3
    col(3)=4
    NumMyElements=map%NumMyElements()
    Allocate (MyGlobalElements(NumMyElements))
    MyGlobalElements=map%MyGlobalElements()
    do i=1,NumMyElements
      num_entries=NumIndicesPerRow(MyGlobalElements(i))
      ECHO(call A%InsertGlobalValues(MyGlobalElements(i),scalar(1:num_entries), col(1:num_entries), err))
      TEST_EQUALITY(err%error_code(),0)
    end do
    ECHO(call A%FillComplete(.true.,err))
    TEST_EQUALITY(err%error_code(),0)
    do i=1,NumMyElements
      num_my_row_entries = A%NumMyRowEntries(i)
      TEST_EQUALITY(num_my_row_entries,NumIndicesPerRow(MyGlobalElements(i)))
    end do
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED,NumGlobalEntries)
  FORTRILINOS_UNITTEST_BEGIN
 use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(error) :: err
    type(Epetra_CrsMatrix) :: A
    type(Epetra_Map) :: map
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int) :: i
    integer(c_int),dimension(:),allocatable :: NumIndicesPerRow
    integer(c_int) :: num_global_entries
    integer(c_int) :: NumMyElements
    integer(c_int), dimension(:), allocatable :: MyGlobalElements
    real(c_double), dimension(3)  :: scalar
    integer(c_int), dimension(3)  :: col
    integer(c_int) :: num_entries
    NumIndicesPerRow=(/3,2,1,3/)
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    scalar(1) = -1.0
    scalar(2) = 1.0
    scalar(3) = 2.0
    col(1)=2
    col(2)=3
    col(3)=4
    NumMyElements=map%NumMyElements()
    Allocate (MyGlobalElements(NumMyElements))
    MyGlobalElements=map%MyGlobalElements()
    do i=1,NumMyElements
      num_entries=NumIndicesPerRow(MyGlobalElements(i))
      ECHO(call A%InsertGlobalValues(MyGlobalElements(i),scalar(1:num_entries), col(1:num_entries), err))
      TEST_EQUALITY(err%error_code(),0)
    end do
    ECHO(call A%FillComplete(.true.,err))
    TEST_EQUALITY(err%error_code(),0)
    do i=1, NumMyElements
      num_global_entries = A%NumGlobalEntries(MyGlobalElements(i))
      TEST_EQUALITY(num_global_entries,NumIndicesPerRow(MyGlobalElements(i)))
    end do
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, ReplaceGlobalValues)
  FORTRILINOS_UNITTEST_BEGIN
 use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(error) :: err
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int) :: i,j, k, NumIndicesPerRow, NumMyElements
    integer(c_int), dimension(:), allocatable :: MyGlobalElements
    real(c_double), dimension(2)  :: scalar
    real(c_double), allocatable, dimension(:)  :: values
    integer(c_int), dimension(2)  :: col
    integer(c_int), allocatable, dimension(:)  :: indices
    integer(c_int) :: global_row, length
    NumIndicesPerRow=3
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    scalar(1) = -1.0
    scalar(2) = 1.0
    col(1)=2
    col(2)=3
    NumMyElements=map%NumMyElements()
    Allocate (MyGlobalElements(NumMyElements))
    MyGlobalElements=map%MyGlobalElements()
    do i=1,NumMyElements
      ECHO(call A%InsertGlobalValues(MyGlobalElements(i),scalar, col,err))
      TEST_EQUALITY(err%error_code(),0)
    end do
    ECHO(call A%FillComplete(.true.,err))
    TEST_EQUALITY(err%error_code(),0)
    scalar(1)=3.0 
    scalar(2)=-4.0
    col(1)=2
    col(2)=3
    global_row=3
    do i=1, NumMyElements
      if (MyGlobalElements(i)==global_row) then
        ECHO(call A%ReplaceGlobalValues(global_row,scalar,col,err)) 
        TEST_EQUALITY(err%error_code(),0)
      end if
    end do
    ECHO(call A%FillComplete(.true.,err))
    TEST_EQUALITY(err%error_code(),0)
    length=2
    do i=1, NumMyElements 
      if (MyGlobalElements(i)==global_row) then
        ECHO(call A%ExtractGlobalRowCopy(global_row,values,indices,err))
        do j=1, 2
          do k=1, 2
            if (indices(k)==col(j)) then
              TEST_EQUALITY(scalar(k), values(j))
            end if
          end do
        end do
      end if
    end do

    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, PutScalar)
  FORTRILINOS_UNITTEST_BEGIN
 use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(error) :: err
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int) :: i, NumIndicesPerRow, NumMyElements
    integer(c_int), dimension(:), allocatable :: MyGlobalElements
    real(c_double), dimension(2)  :: scalar
    real(c_double), allocatable, dimension(:)  :: values
    integer(c_int), dimension(2)  :: col
    integer(c_int), allocatable, dimension(:)  :: indices 
    integer(c_int) :: global_row, length
    NumIndicesPerRow=2
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map, NumIndicesPerRow,.false.))
    scalar=2.0
    col(1)=1
    col(2)=3 
    NumMyElements=map%NumMyElements()
    Allocate (MyGlobalElements(NumMyElements))
    MyGlobalElements=map%MyGlobalElements()
    do i=1,NumMyElements
     ECHO(call A%InsertGlobalValues(MyGlobalElements(i),scalar, col,err))
     TEST_EQUALITY(err%error_code(),0)
    end do
    ECHO(call A%PutScalar(1.0_c_double,err))
    TEST_EQUALITY(err%error_code(),0)
    ECHO(call A%FillComplete(.true.,err))
    TEST_EQUALITY(err%error_code(),0)
    global_row=4
    length=2
    do i=1, NumMyElements
      if (MyGlobalElements(i)== global_row) then
        ECHO(call A%ExtractGlobalRowCopy(global_row,values,indices,err))
        TEST_EQUALITY(1.0_c_double, values(1))
        TEST_EQUALITY(1.0_c_double, values(2))
        TEST_EQUALITY(col(1), indices(1))
        TEST_EQUALITY(col(2), indices(2))
      end if
    end do
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED,Multiply_Vector)
  FORTRILINOS_UNITTEST_BEGIN
 use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(error) :: err
    type(Epetra_CrsMatrix) :: A
    type(Epetra_Vector) :: x, y
    type(Epetra_Map) :: map
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int) :: i
    integer(c_int),dimension(:),allocatable :: NumIndicesPerRow
    integer(c_int) :: NumMyElements
    integer(c_int), dimension(:), allocatable :: MyGlobalElements
    real(c_double), dimension(3)  :: scalar
    integer(c_int), dimension(3)  :: col
    integer(c_int) :: num_entries
    real(c_double), dimension(:), allocatable ::  x_values 
    NumIndicesPerRow=(/3,2,1,3/)
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    scalar(1) = 1.0
    scalar(2) = 2.0
    scalar(3) = 3.0
    col(1)=2
    col(2)=3
    col(3)=4
    NumMyElements=map%NumMyElements()
    Allocate (MyGlobalElements(NumMyElements))
    MyGlobalElements=map%MyGlobalElements()
    do i=1,NumMyElements
      num_entries=NumIndicesPerRow(MyGlobalElements(i))
      ECHO(call A%InsertGlobalValues(MyGlobalElements(i),scalar(1:num_entries), col(1:num_entries), err))
      TEST_EQUALITY(err%error_code(),0)
    end do
    ECHO(call A%FillComplete(.true.,err))
    TEST_EQUALITY(err%error_code(),0)
    ECHO(x=Epetra_Vector(map, zero_initial=.true.))
    allocate(x_values(NumMyElements))
    x_values=2._c_double
    ECHO(call x%ReplaceGlobalValues(x_values, MyGlobalElements))
    ECHO(y=Epetra_Vector(map))
    ECHO(call A%Multiply_Vector(.false., x, y, err))
    TEST_EQUALITY(err%error_code(),0)
    ECHO(x_values=y%ExtractCopy())
    do i=1, NumMyElements
      if(MyGlobalElements(i)==1) then
         TEST_EQUALITY(x_values(i), 12.0_c_double)
      else if(MyGlobalElements(i)==3) then
         TEST_EQUALITY(x_values(i), 2.0_c_double)
      end if
    end do
    call A%force_finalize()
    call x%force_finalize()
    call y%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END
 
  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED,MyGlobalRow)
  FORTRILINOS_UNITTEST_BEGIN
  use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(error) :: err
    type(Epetra_CrsMatrix) :: A
    type(Epetra_Map) :: map
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int) :: i, is_my_gid
    integer(c_int),dimension(:),allocatable :: NumIndicesPerRow
    integer(c_int) :: NumMyElements
    integer(c_int), dimension(:), allocatable :: MyGlobalElements
    real(c_double), dimension(3)  :: scalar
    integer(c_int), dimension(3)  :: col
    integer(c_int) :: num_entries
    logical        :: my_gid
    NumIndicesPerRow=(/3,2,1,3/)
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    scalar(1) = 1.0
    scalar(2) = 2.0
    scalar(3) = 3.0
    col(1)=2
    col(2)=3
    col(3)=4
    NumMyElements=map%NumMyElements()
    Allocate (MyGlobalElements(NumMyElements))
    MyGlobalElements=map%MyGlobalElements()
    do i=1,NumMyElements
      num_entries=NumIndicesPerRow(MyGlobalElements(i))
      ECHO(call A%InsertGlobalValues(MyGlobalElements(i),scalar(1:num_entries), col(1:num_entries), err))
      TEST_EQUALITY(err%error_code(),0)
    end do
    ECHO(call A%FillComplete(.true.,err))
    TEST_EQUALITY(err%error_code(),0)
    do i=1, NumMyElements
      ECHO(my_gid=A%MyGlobalRow(MyGlobalElements(i)))
      if (my_gid) is_my_gid=0
      TEST_EQUALITY(is_my_gid, 0)
    end do
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED,Multiply_MultiVector)
  FORTRILINOS_UNITTEST_BEGIN
  use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(error) :: err
    type(Epetra_CrsMatrix) :: A
    type(Epetra_MultiVector) :: x, y
    type(Epetra_Map) :: map
    type(Epetra_BlockMap) :: vector_map
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4, vector_NumGlobalElements=4
    integer(c_int) :: i, vector_size
    integer(c_int),dimension(:),allocatable :: NumIndicesPerRow
    integer(c_int) :: NumMyElements
    integer(c_int), dimension(:), allocatable :: MyGlobalElements
    real(c_double), dimension(3)  :: scalar
    integer(c_int), dimension(3)  :: col
    integer(c_int) :: num_entries
    real(c_double), dimension(:, :), allocatable ::  x_values
    NumIndicesPerRow=(/3,2,1,3/)
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    scalar(1) = 1.0
    scalar(2) = 2.0
    scalar(3) = 3.0
    col(1)=1
    col(2)=3
    col(3)=4
    NumMyElements=map%NumMyElements()
    Allocate (MyGlobalElements(NumMyElements))
    MyGlobalElements=map%MyGlobalElements()
    do i=1,NumMyElements
      num_entries=NumIndicesPerRow(MyGlobalElements(i))
      ECHO(call A%InsertGlobalValues(MyGlobalElements(i),scalar(1:num_entries), col(1:num_entries), err))
      TEST_EQUALITY(err%error_code(),0)
    end do
    ECHO(call A%FillComplete(.true.,err))
    TEST_EQUALITY(err%error_code(),0)
    ECHO(vector_map = Epetra_BlockMap(Num_GlobalElements=vector_NumGlobalElements, Element_Size=1_c_int, IndexBase=IndexBase, comm=comm)) 
    vector_size=3
    ECHO(x=Epetra_MultiVector(vector_map, vector_size,  .true.))
    ECHO(call x%ReplaceGlobalValue(GlobalRow=3_c_int,VectorIndex=1_c_int,ScalarValue=3.0_c_double))
    ECHO(y=Epetra_MultiVector(vector_map, vector_size, .true.))
    ECHO(call A%Multiply(.false., x, y, err))
    TEST_EQUALITY(err%error_code(),0)
    allocate(x_values(x%MyLength(),x%NumVectors()))
    !ECHO(x_values=y%ExtractCopy(4_c_int,err))
    ECHO(x_values=y%ExtractCopy(x%MyLength(),err))
    TEST_EQUALITY(err%error_code(),0)
    deallocate(MyGlobalElements)
    NumMyElements=vector_map%NumMyElements()
    allocate(MyGlobalElements(NumMyElements))
    MyGlobalElements=vector_map%MyGlobalElements()
    do i=1, NumMyElements
      if(MyGlobalElements(i)==3) then
         TEST_EQUALITY(x_values(i,1), 0.0_c_double)
         TEST_EQUALITY(x_values(i,2), 0.0_c_double)
         TEST_EQUALITY(x_values(i,3), 0.0_c_double)
      else 
         TEST_EQUALITY(x_values(i,1), 6.0_c_double)
         TEST_EQUALITY(x_values(i,2), 0.0_c_double)
         TEST_EQUALITY(x_values(i,3), 0.0_c_double)
      end if
    end do
    call A%force_finalize()
    call x%force_finalize()
    call y%force_finalize()
    call vector_map%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

FORTRILINOS_UNITTEST_MODULE_END(CLASS_BEING_TESTED)
