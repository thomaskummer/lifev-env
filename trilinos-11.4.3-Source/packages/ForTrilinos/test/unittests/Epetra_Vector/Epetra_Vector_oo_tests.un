#include "ForTrilinos_config.h"
#include "runtime_macros.h"

  FORTRILINOS_UNITTEST_MODULE_DEF(CLASS_BEING_TESTED)
    use FEpetra_Comm,only:Epetra_Comm
    use iso_c_binding,only:c_int,c_double,c_char,c_long
    use ForTrilinos_error
#ifdef HAVE_MPI
    use mpi, only : MPI_COMM_WORLD
    use FEpetra_MpiComm, only: Epetra_MpiComm
#else 
    use FEpetra_SerialComm, only: Epetra_SerialComm
#endif
    use FEpetra_BlockMap, only: Epetra_BlockMap
    use FEpetra_Map, only: Epetra_Map
    use FEpetra_Vector, only: Epetra_Vector
  FORTRILINOS_UNITTEST_MODULE_BEGIN(CLASS_BEING_TESTED)

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Create)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
    type(Epetra_Map)        :: map
    type(Epetra_Vector)     :: EV
#ifdef HAVE_MPI
    type(Epetra_MpiComm)    ::   comm
#else
    type(Epetra_SerialComm) ::   comm
#endif
    integer                 :: localElems, info
    real(c_double), allocatable :: lEV(:), vres(:)
    integer(c_int)          :: NumElems, indexbase, nglb
    success = .TRUE.
#ifdef HAVE_MPI
    comm   = Epetra_MpiComm(MPI_COMM_WORLD)
#else
    comm   = Epetra_SerialComm()
#endif
    numElems  = 100
    indexbase = 1
    ECHO(map = Epetra_Map(NumElems,indexbase,comm))
    ECHO(EV  = Epetra_Vector(map,.TRUE.))
    ! What to test now? 
    ECHO(nglb = EV%GlobalLength()) 
    TEST_EQUALITY(nglb,NumElems)
    ! We have initialized to zero,
    ! so check its really zero
    ECHO(vres = EV%Norm2())
    TEST_EQUALITY(maxval(vres),0.0d0)	
    ECHO(vres = EV%NormInf())
    TEST_EQUALITY(maxval(vres),0.0d0)	
    

    call EV%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, ReplaceGlobalValues)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
    type(Epetra_Map)        :: map
    type(Epetra_Vector)     :: EV
#ifdef HAVE_MPI
    type(Epetra_MpiComm)    ::   comm
#else
    type(Epetra_SerialComm) ::   comm
#endif
    integer                 :: localElems, info
    real(c_double), allocatable :: lEV(:), vres(:)
    integer(c_int), allocatable :: indices(:)
    integer(c_int)          :: NumElems, indexbase, nglb, i, k
    real(c_double)          :: val, ref, tol
    success = .TRUE.
#ifdef HAVE_MPI
    comm   = Epetra_MpiComm(MPI_COMM_WORLD)
#else
    comm   = Epetra_SerialComm()
#endif
    numElems  = 100
    indexbase = 1
    ECHO(map = Epetra_Map(NumElems,indexbase,comm))
    ECHO(EV  = Epetra_Vector(map,.TRUE.))
    allocate(indices(numElems), lEV(numElems),stat=info)
    TEST_EQUALITY(info,0) 
    ! What to test now? 
    do i=1, numElems
       indices(i) = i
       lEV(i)     = 2*i
    end do  
    ECHO(call EV%ReplaceGlobalValues(lEV,indices))
    ECHO(vres = EV%MinValue())
    TEST_EQUALITY(vres(1),2)	
    ECHO(vres = EV%MaxValue())
    TEST_EQUALITY(vres(1),2*NumElems)	
    ECHO(vres = EV%Norm1())
    ! Now build a reference value for the
    ! dot product. This is from the formula
    ! \sum_1^n i = n(n+1)/2
    k = NumElems
    val = (1.d0*k*(k+1))/2
    ! Perturbations in a sum 
    ! may be bounded by a factor
    ! NumElems*epsilon(1.d0)
    ! implying the forward bound below
    ! which is however not tight
    ref = val*2
    tol = NumElems*epsilon(1.d0)*ref
    TEST_LESSEQUAL(abs(ref-vres(1)),tol)

    call EV%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, ReplaceMyValues)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
    type(Epetra_Map)        :: map
    type(Epetra_Vector)     :: EV
#ifdef HAVE_MPI
    type(Epetra_MpiComm)    ::   comm
#else
    type(Epetra_SerialComm) ::   comm
#endif
    integer                 :: localElems, info
    real(c_double), allocatable :: lEV(:), vres(:)
    integer(c_int), allocatable :: indices(:)
    integer(c_int)          :: NumGlobalElements, NumMyElements
    integer(c_int),parameter:: indexbase=1
    integer(c_int)          :: nglb, i, k
    real(c_double)          :: val, ref, tol
    success = .TRUE.
#ifdef HAVE_MPI
    comm   = Epetra_MpiComm(MPI_COMM_WORLD)
#else
    comm   = Epetra_SerialComm()
#endif
    NumGlobalElements  = 100
    ECHO(map = Epetra_Map(NumGlobalElements,indexbase,comm))
    ECHO(EV  = Epetra_Vector(map,.TRUE.))
    NumMyElements = map%NumMyElements()
    allocate(indices(NumMyElements), lEV(NumMyElements),stat=info)
    TEST_EQUALITY(info,0) 
    do i=1,NumMyElements
       indices(i) = i
       lEV(i)     = 2*i
    end do  
    ECHO(call EV%ReplaceMyValues(lEV,indices))
    do i=1,NumMyElements
     TEST_EQUALITY(EV%get_element(i),lEV(i))
    enddo

    call EV%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

FORTRILINOS_UNITTEST_MODULE_END(CLASS_BEING_TESTED)
