!*********************************************************************
! ForTrilinos: Object-Oriented Fortran 2003 interface to Trilinos
!                Copyright 2010 Sandia Corporation
!
! Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
! the U.S. Government retains certain rights in this software.
!
! Redistribution and use in source and binary forms, with or without
! modification, are permitted provided that the following conditions are met:
!
! 1. Redistributions of source code must retain the above copyright
!    notice, this list of conditions and the following disclaimer.
!
! 2. Redistributions in binary form must reproduce the above copyright
!    notice, this list of conditions and the following disclaimer in the
!    documentation and/or other materials provided with the distribution.
!
! 3. Neither the name of the Corporation nor the names of the
!    contributors may be used to endorse or promote products derived from
!    this software without specific prior written permission.
!
! THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
! EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
! IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
! PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
! CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
! EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
! PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
! PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
! LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
! NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
! SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
!
! Questions? Contact Salvatore Filippone (salvatore.filippone@uniroma2.it)
!*********************************************************************

#include "ForTrilinos_config.h"
#include "runtime_macros.h"

FORTRILINOS_UNITTEST_MODULE_DEF(CLASS_BEING_TESTED)
FORTRILINOS_UNITTEST_MODULE_BEGIN(CLASS_BEING_TESTED)

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Create_FromArray)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    use forepetra
    use ForTrilinos_external_utils
    implicit none 
    type(FT_Epetra_Comm_ID_t) CommID
    type(FT_Epetra_BlockMap_ID_t) MapID
    type(FT_Epetra_Vector_ID_t) VecID
    integer(c_int) :: NumGlobalElements, ElementSize, IndexBase, i
    real(c_double),dimension(6) :: V
    real(c_double) :: val
    success = .TRUE.

#ifdef HAVE_MPI
    ECHO(CommID = Epetra_Comm_Degeneralize(Epetra_MpiComm_Generalize(Epetra_MpiComm_Fortran_Create(MPI_COMM_WORLD))))
#else
    ECHO(CommID = Epetra_Comm_Degeneralize(Epetra_SerialComm_Generalize(Epetra_SerialComm_Create())))
#endif

    ECHO(NumGlobalElements = 6)
    ECHO(ElementSize = 1)
    ECHO(IndexBase = 0)
    ECHO(MapID = Epetra_BlockMap_Create(NumGlobalElements, ElementSize, IndexBase, CommID))
    do i = 1,6
      v(i) = i*2.43+i*i*0.89
    end do
    ECHO(VecID = Epetra_Vector_Create_FromArray(FT_Epetra_DataAccess_E_Copy, MapID, V))
    TEST_EQUALITY(VecID%table, FT_Epetra_Vector_ID)
    TEST_EQUALITY(VecID%index, 0)
    TEST_EQUALITY(VecID%is_const, FT_False);
#ifndef HAVE_MPI
    do i = 1,6
      ECHO(val = Epetra_Vector_getElement(VecID, i-1))
      ! this should be switched over to a tolerance test when Salvatore adds one
      TEST_EQUALITY(val, V(i))
    end do
#endif
  FORTRILINOS_UNITTEST_END

FORTRILINOS_UNITTEST_MODULE_END(CLASS_BEING_TESTED)
