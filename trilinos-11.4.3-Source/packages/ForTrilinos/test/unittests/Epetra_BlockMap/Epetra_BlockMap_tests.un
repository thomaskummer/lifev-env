!*********************************************************************
! ForTrilinos: Object-Oriented Fortran 2003 interface to Trilinos
!                Copyright 2010 Sandia Corporation
!
! Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
! the U.S. Government retains certain rights in this software.
!
! Redistribution and use in source and binary forms, with or without
! modification, are permitted provided that the following conditions are met:
!
! 1. Redistributions of source code must retain the above copyright
!    notice, this list of conditions and the following disclaimer.
!
! 2. Redistributions in binary form must reproduce the above copyright
!    notice, this list of conditions and the following disclaimer in the
!    documentation and/or other materials provided with the distribution.
!
! 3. Neither the name of the Corporation nor the names of the
!    contributors may be used to endorse or promote products derived from
!    this software without specific prior written permission.
!
! THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
! EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
! IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
! PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
! CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
! EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
! PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
! PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
! LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
! NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
! SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
!
! Questions? Contact Salvatore Filippone (salvatore.filippone@uniroma2.it)
!*********************************************************************


#include "ForTrilinos_config.h"
#include "runtime_macros.h"

FORTRILINOS_UNITTEST_MODULE_DEF(CLASS_BEING_TESTED)
FORTRILINOS_UNITTEST_MODULE_BEGIN(CLASS_BEING_TESTED)

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, RemoteIDList)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    use forepetra
    use ForTrilinos_external_utils
    implicit none 
    type(FT_Epetra_Comm_ID_t) CommID
    type(FT_Epetra_BlockMap_ID_t) MapID
    integer(c_int) :: NumMyElements, ElementSize, NumGlobalElements
    integer(c_int) :: NumProc, MyPID, off, IndexBase, NumIDs, ret, i
    integer(c_int), dimension(4) :: MyGlobalElements
    integer(c_int), dimension(2) :: GIDList, PIDList, LIDList
    success = .TRUE.

#ifdef HAVE_MPI
    ECHO(CommID = Epetra_Comm_Degeneralize(Epetra_MpiComm_Generalize(Epetra_MpiComm_Fortran_Create(MPI_COMM_WORLD))))
#else
    ECHO(CommID = Epetra_Comm_Degeneralize(Epetra_SerialComm_Generalize(Epetra_SerialComm_Create())))
#endif
    NumMyElements = 4
    ElementSize = 3
    ECHO(NumProc = Epetra_Comm_NumProc(CommID))
    ECHO(NumGlobalElements = NumMyElements * NumProc)
    ECHO(MyPID = Epetra_Comm_MyPID(CommID))
    ECHO(off = NumMyElements * MyPID)
    MyGlobalElements(1) = off
    MyGlobalElements(2) = 1+off
    MyGlobalElements(3) = 2+off
    MyGlobalElements(4) = 3+off
    IndexBase = 0
    ECHO(MapID = Epetra_BlockMap_Create_Arbitrary(NumGlobalElements, NumMyElements, MyGlobalElements, ElementSize, IndexBase, CommID))
    NumIDs = 2
    GIDList(1) = 1
    GIDList(2) = NumGlobalElements-3
    ECHO(ret = Epetra_BlockMap_RemoteIDList(MapID, NumIDs, GIDList, PIDList, LIDList))
    TEST_EQUALITY(ret, 0)
    do i = 1, NumIDs
      TEST_EQUALITY(PIDList(i), (GIDList(i)/NumMyElements))
      TEST_EQUALITY(LIDList(i), mod(GIDList(i), NumMyElements))
    end do
  FORTRILINOS_UNITTEST_END

FORTRILINOS_UNITTEST_MODULE_END(CLASS_BEING_TESTED)
