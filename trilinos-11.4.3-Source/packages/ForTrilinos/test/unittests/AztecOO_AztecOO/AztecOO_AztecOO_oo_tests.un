!*********************************************************************
! ForTrilinos: Object-Oriented Fortran 2003 interface to Trilinos
!                Copyright 2010 Sandia Corporation
!
! Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
! the U.S. Government retains certain rights in this software.
!
! Redistribution and use in source and binary forms, with or without
! modification, are permitted provided that the following conditions are met:
!
! 1. Redistributions of source code must retain the above copyright
!    notice, this list of conditions and the following disclaimer.
!
! 2. Redistributions in binary form must reproduce the above copyright
!    notice, this list of conditions and the following disclaimer in the
!    documentation and/or other materials provided with the distribution.
!
! 3. Neither the name of the Corporation nor the names of the
!    contributors may be used to endorse or promote products derived from
!    this software without specific prior written permission.
!
! THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
! EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
! IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
! PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
! CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
! EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
! PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
! PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
! LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
! NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
! SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
!
! Questions? Contact Salvatore Filippone (salvatore.filippone@uniroma2.it)
!*********************************************************************

#include "ForTrilinos_config.h"
#include "runtime_macros.h"

FORTRILINOS_UNITTEST_MODULE_DEF(CLASS_BEING_TESTED)
#ifdef HAVE_MPI
    use mpi, only: MPI_COMM_WORLD
    use FEpetra_MpiComm,only:Epetra_MpiComm
#else
    use FEpetra_SerialComm,only:Epetra_SerialComm
#endif
    use FEpetra_Comm,only:Epetra_Comm
    use FEpetra_Map,only:Epetra_Map
    use FEpetra_BlockMap, only: Epetra_BlockMap
    use FEpetra_Vector,only:Epetra_Vector
    use FEpetra_MultiVector, only:Epetra_MultiVector
    use FEpetra_CrsMatrix,only:Epetra_CrsMatrix
    use FAztecOO, only:AztecOO
    use iso_c_binding,only:c_int,c_double,c_char,c_long
    use ForTrilinos_oo_unittest_utils
    use ForTrilinos_error
    use ForTrilinos_enum_wrappers
FORTRILINOS_UNITTEST_MODULE_BEGIN(CLASS_BEING_TESTED)

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, FromRowMatrix)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A
    type(Epetra_Vector) :: x,b
    type(AztecOO) :: Solver
    type(FT_AztecOO_ID_t) :: AztecOO_ID
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 5
    integer(c_int) :: NumIndicesPerRow=3
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    ECHO(x=Epetra_Vector(map,.true.))
    ECHO(b=Epetra_Vector(map,.true.))
    ECHO(Solver=AztecOO(A,x,b))
    ECHO(AztecOO_ID = Solver%get_AztecOO_ID())
    TEST_EQUALITY(AztecOO_ID%table, FT_AztecOO_ID)
    TEST_EQUALITY(AztecOO_ID%index, 0)
    TEST_EQUALITY(AztecOO_ID%is_const, FT_False)
    call Solver%force_finalize()
    call x%force_finalize()
    call b%force_finalize()
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Solver_constant)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A
    type(Epetra_Vector) :: x,b
    type(AztecOO) :: Solver
    type(error) :: err
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 8, NumMyElements, MaximumIter=100
    integer(c_int),dimension(:),allocatable :: MyGlobalElements, NumNonZero
    real(c_double),dimension(:),allocatable:: c
    real(c_double) :: values(2)
    real(c_double), parameter :: tolerance = 1.0E-4,three=3.0
    integer(c_int) :: MyGlobalElements_diagonal(1),i,indices(2)
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    NumMyElements = map%NumMyElements()
    allocate(MyGlobalElements(NumMyElements))
    MyGlobalElements = map%MyGlobalElements()
    allocate(NumNonZero(NumMyElements))
    NumNonZero = 3  ! Non zero elements per row
! Create a Epetra_Matrix
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumNonZero))
! Add rows one at a time
! off diagonal values will always be 1 and 1
  values(1) = 1.0
  values(2) = 1.0
  do i=1,NumMyElements
    if (MyGlobalElements(i)==1) then
      indices(1) = NumGlobalElements 
      indices(2) = 2
    else if(MyGlobalElements(i)==NumGlobalElements) then
      indices(1) = NumGlobalElements-1
      indices(2) = 1
    else
      indices(1) = MyGlobalElements(i)-1
      indices(2) = MyGlobalElements(i)+1
    end if
     call A%InsertGlobalValues(MyGlobalElements(i),values,indices)
  !Put in the diaogonal entry
     MyGlobalElements_diagonal=MyGlobalElements(i)
     call A%InsertGlobalValues(MyGlobalElements(i),[three],MyGlobalElements_diagonal)
  end do
  !Finish up
    call A%FillComplete(.true.)
    ECHO(x=Epetra_Vector(map,.true.))
    ECHO(b=Epetra_Vector(map,.true.))
    ECHO(call x%Random())
    ECHO(call b%PutScalar(1.0_c_double))
    ECHO(Solver=AztecOO(A,x,b))
    ECHO(call Solver%iterate(A,x,b,MaximumIter,tolerance,err))
    TEST_EQUALITY(err%error_code(),0) 
    allocate(c(x%MyLength()))
    ECHO(c=x%ExtractCopy(err))
    TEST_EQUALITY(err%error_code(),0) 
    do i=1, NumMyElements
     TEST_LESSEQUAL(abs((c(i)-0.2_c_double)/0.2_c_double),tolerance)
    enddo 
    call Solver%force_finalize()
    call x%force_finalize()
    call b%force_finalize()
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Solver_variable)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A
    type(Epetra_Vector) :: x,b
    type(AztecOO) :: Solver
    type(error) :: err
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 8, NumMyElements, MaximumIter=100
    integer(c_int),dimension(:),allocatable :: MyGlobalElements, NumNonZero
    real(c_double),dimension(:),allocatable:: c,b_values
    ! vector holds the answer for vector of with NumGlobalElements=8
    real(c_double),dimension(8):: vector=(/-0.99048,0.58095,0.24762,0.67619,0.72381,1.15238,0.81905,2.39048/) 
    real(c_double) :: values(2)
    real(c_double), parameter :: tolerance = 1.0E-4,three=3.0
    integer(c_int) :: MyGlobalElements_diagonal(1),i,indices(2)
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    NumMyElements = map%NumMyElements()
    allocate(MyGlobalElements(NumMyElements))
    MyGlobalElements = map%MyGlobalElements()
    allocate(NumNonZero(NumMyElements))
    NumNonZero = 3  ! Non zero elements per row
! Create a Epetra_Matrix
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumNonZero))
! Add rows one at a time
! off diagonal values will always be 1 and 1
  values(1) = 1.0
  values(2) = 1.0
  do i=1,NumMyElements
    if (MyGlobalElements(i)==1) then
      indices(1) = NumGlobalElements 
      indices(2) = 2
    else if(MyGlobalElements(i)==NumGlobalElements) then
      indices(1) = NumGlobalElements-1
      indices(2) = 1
    else
      indices(1) = MyGlobalElements(i)-1
      indices(2) = MyGlobalElements(i)+1
    end if
     call A%InsertGlobalValues(MyGlobalElements(i),values,indices)
  !Put in the diaogonal entry
     MyGlobalElements_diagonal=MyGlobalElements(i)
     call A%InsertGlobalValues(MyGlobalElements(i),[three],MyGlobalElements_diagonal)
  end do
  !Finish up
    call A%FillComplete(.true.)
    ECHO(x=Epetra_Vector(map,.true.))
    ECHO(b=Epetra_Vector(map,.true.))
    ECHO(call x%Random())
    ECHO(allocate(b_values(NumMyElements)))
    ECHO(b_values=real(MyGlobalElements-1))
    ECHO(call b%ReplaceGlobalValues(b_values,MyGlobalElements,err))
    ECHO(Solver=AztecOO(A,x,b))
    ECHO(call Solver%iterate(A,x,b,MaximumIter,tolerance,err))
    TEST_EQUALITY(err%error_code(),0) 
    allocate(c(x%MyLength()))
    ECHO(c=x%ExtractCopy(err))
    TEST_EQUALITY(err%error_code(),0) 
    do i=1, NumMyElements
     TEST_LESSEQUAL(abs((c(i)-vector(MyGlobalElements(i)))/vector(MyGlobalElements(i))),tolerance)
    enddo 
    call Solver%force_finalize()
    call x%force_finalize()
    call b%force_finalize()
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()

  FORTRILINOS_UNITTEST_END

FORTRILINOS_UNITTEST_MODULE_END(CLASS_BEING_TESTED)
