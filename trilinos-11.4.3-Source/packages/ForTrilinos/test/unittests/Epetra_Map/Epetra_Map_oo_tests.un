!*********************************************************************
! ForTrilinos: Object-Oriented Fortran 2003 interface to Trilinos
!                Copyright 2010 Sandia Corporation
!
! Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
! the U.S. Government retains certain rights in this software.
!
! Redistribution and use in source and binary forms, with or without
! modification, are permitted provided that the following conditions are met:
!
! 1. Redistributions of source code must retain the above copyright
!    notice, this list of conditions and the following disclaimer.
!
! 2. Redistributions in binary form must reproduce the above copyright
!    notice, this list of conditions and the following disclaimer in the
!    documentation and/or other materials provided with the distribution.
!
! 3. Neither the name of the Corporation nor the names of the
!    contributors may be used to endorse or promote products derived from
!    this software without specific prior written permission.
!
! THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
! EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
! IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
! PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
! CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
! EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
! PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
! PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
! LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
! NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
! SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
!
! Questions? Contact Salvatore Filippone (salvatore.filippone@uniroma2.it)
!*********************************************************************

#include "ForTrilinos_config.h"
#include "runtime_macros.h"

FORTRILINOS_UNITTEST_MODULE_DEF(CLASS_BEING_TESTED)
    use FEpetra_Comm,only:Epetra_Comm
    use iso_c_binding,only:c_int,c_double,c_char,c_long
    use ForTrilinos_error
#ifdef HAVE_MPI
    use mpi, only : MPI_COMM_WORLD
    use FEpetra_MpiComm, only: Epetra_MpiComm
#else 
    use FEpetra_SerialComm, only: Epetra_SerialComm
#endif
    use FEpetra_Map, only: Epetra_Map
FORTRILINOS_UNITTEST_MODULE_BEGIN(CLASS_BEING_TESTED)

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Create)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
    type(Epetra_Map)        :: map
#ifdef HAVE_MPI
    type(Epetra_MpiComm)    ::   comm
#else
    type(Epetra_SerialComm) ::   comm
#endif
    
    integer(c_int)          :: NumElems, indexbase
    success = .TRUE.
#ifdef HAVE_MPI
    comm   = Epetra_MpiComm(MPI_COMM_WORLD)
#else
    comm   = Epetra_SerialComm()
#endif
    numElems  = 10
    indexbase = 1
    ECHO(map = Epetra_Map(NumElems,indexbase,comm))
    ! What to test now? 
    TEST_EQUALITY(map%NumGlobalElements(),NumElems)	
    TEST_EQUALITY(map%IndexBase(),indexbase)	
    TEST_EQUIV(map%LinearMap(),.TRUE.)	

    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Duplicate)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
#ifdef HAVE_MPI
    type(Epetra_MpiComm) ::   comm
#else
    type(Epetra_SerialComm) ::   comm
#endif
    type(Epetra_Map)          :: map, map2
    integer(c_int)            :: NumElems, indexbase
    success = .TRUE.
#ifdef HAVE_MPI
    comm   = Epetra_MpiComm(MPI_COMM_WORLD)
#else
    comm   = Epetra_SerialComm()
#endif
    numElems  = 10
    indexbase = 1
    ECHO(map = Epetra_Map(NumElems,indexbase,comm))
    ! What to test now? 
    map2 = Epetra_Map(map)  ! Invokes duplicate procedure 
    TEST_EQUALITY(map%NumGlobalElements(),map2%NumGlobalElements())
    TEST_EQUALITY(map%IndexBase(),map2%IndexBase())	
    TEST_EQUIV(map%SameAs(map2),.TRUE.)	
 
    call map2%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

FORTRILINOS_UNITTEST_MODULE_END(CLASS_BEING_TESTED)
