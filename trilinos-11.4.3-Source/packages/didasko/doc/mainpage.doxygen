/*! \mainpage DIDASKO : Tutorial for Trilinos

\image html ../didasko_logo.jpeg

\section table Table of Contents

- \ref did_intro
- \ref amesos
- \ref anasazi
- \ref aztecoo
- \ref epetra
- \ref epetraext
- \ref ifpack
- \ref ml
- \ref nox
- \ref teuchos
- \ref triutils

\section did_intro Introduction

DIDASKO, the tutorial of Trilinos, offers a quick overview of Trilinos.
The reader can find a variety of examples on several Trilinos packages. Each
example is documented with comments and suggestions, some in the source file
itself, and some others in the PDF document. The PDF version of the tutorial
can be found in the Trilinos web page.

Usually, a Trilinos package interoperates with other Trilinos packages (and
with external packages as well). To be used efficiently, the examples
of DIDASKO would require the following compilation flags:
\code
--enable-epetra --enable-aztecoo --enable-amesos --enable-anasazi \
--enable-ifpack --enable-ml --enable-nox --enable-teuchos \
--enable-triutils
\endcode

Most of the required packages are enabled by default. No example can
effectively run without Epetra, and most require AztecOO and Triutils (this
latter to generate the linear system matrix).

All the Didasko examples include, as first header file, the file
\code
#include "Didasko_ConfigDefs.h"
\endcode

Then, the code checks for installed libraries, like for instance
\code
#if defined(HAVE_DIDASKO_EPETRA)
\endcode

<P>In the following, we report the source code of each of the examples.
Packages are reported in alphabetical order.

\section amesos Amesos
- Basic usage of Amesos: \ref amesos_ex1

\section anasazi Anasazi Examples
- Computation of the lowest eigenvalues and the corresponding 
  eigenvectors of a symmetric matrix using a Block Krylov Schur solver: \ref anasazi_ex1
- Computation of the lowest eigenvalues and the corresponding 
  eigenvectors of a symmetric matrix using a Block Davidson solver: \ref anasazi_ex2
- Computation of the lowest eigenvalues and the corresponding 
  eigenvectors of a nonsymmetric matrix using a Block Krylov Schur solver: \ref anasazi_ex3
- Computation of the lowest eigenvalues and the corresponding 
  eigenvectors of a symmetric matrix using an LOBPCG solver:  \ref anasazi_ex4

\section epetra Epetra Examples
- Basic usage of communicators: \ref epetra_ex1
- Definition of Epetra_Map objects: \ref epetra_ex2
- Definition of vectors: \ref epetra_ex3
- Definition of serial dense vectors: \ref epetra_ex4
- Basic operations on vectors. Work on the element vectors: \ref epetra_ex5
- Use of ExtractView of Epetra_Vector: \ref epetra_ex6
- Example of Epetra_MultiVector; use of ExtractView on MultiVector: \ref
  epetra_ex7
- Epetra_Vectors in View mode; use of ResetView: \ref epetra_ex8
- Epetra_Export classes: \ref epetra_ex9
- Definition of dense serial matrices: \ref epetra_ex10
- Basic definition of communicators: \ref epetra_ex11
- Creation of a tridiagonal matrix: \ref epetra_ex12
- Simple FE code: \ref epetra_ex13
- Print out some information about an Epetra_CrsMatrix: \ref epetra_ex14
- Output an Epetra_CrsMatrix in MATLAB format: \ref epetra_ex15
- Output a vector in MATLAB format: \ref epetra_ex16
- Construct an Epetra_VrbMatrix: \ref epetra_ex17
- Basic operations on vectors: \ref epetra_ex18
- Create an Epetra_CrsMatrix corresponding to a 2D Laplacian problem
 on a cartesian mesh: \ref epetra_ex19
- Example of use of Epetra_Time and Epetra_Flops: \ref epetra_ex20
- Use of Epetra_Operator: \ref epetra_ex21, \ref epetra_ex22
- Use of Epetra_FECrsMatrix: \ref epetra_ex23
- Show the usage of RowMap, ColumnMap, RangeMap and DomainMap: \ref
  epetra_ex24


\section epetraext EpetraExt Examples
- Generate a matrix using triutils and redistribute with Zoltan: \ref
  epetraext_ex1
- Generate a linearproblem using triutils and redistribute with Zoltan: \ref
  epetraext_ex2

\section aztecoo AztecOO Examples
- Simple Jacobi preconditioner: \ref aztecoo_ex1
- AztecOO as a preconditioner for AztecOO:  \ref aztecoo_ex2
- AztecOO CG and ICC(0) factorization as preconditioner: \ref aztecoo_ex3

\section ifpack IFPACK Examples
- Using IFPACK factorizations as Aztec's preconditioners: \ref ifpack_ex1,
  \ref ifpack_ex2

\section ml ML Examples
- Two-level domain decomposition preconditioner with AztecOO and ML: \ref
  ml_ex1
- Use of ML as a black-box smoothed aggregation preconditioner: \ref ml_ex2

\section nox NOX Examples
- Simple nonlinear problem: \ref nox_ex1
- Simple nonlinear PDE problem: \ref nox_ex2

\section teuchos Teuchos Examples
- Teuchos dense matrices: \ref teuchos_ex1
- Teuchos interface to BLAS: \ref teuchos_ex2
- Teuchos interface to LAPACK: \ref teuchos_ex3
- Teuchos parameters list: \ref teuchos_ex4
- Teuchos RCP: \ref teuchos_ex5
- Teuchos time monitor: \ref teuchos_ex6
- Teuchos command line processor: \ref teuchos_ex7

\section triutils Triutils Examples
- Read a matrix in HB format: \ref triutils_ex1
- Basic usage of CommandLineParser: \ref triutils_ex2


*/

/*!
\page amesos_ex1

\include amesos/ex1.cpp
*/

/*!
\page anasazi_ex1

\include anasazi/ex1.cpp
*/

/*!
\page anasazi_ex2

\include anasazi/ex2.cpp
*/

/*!
\page anasazi_ex3

\include anasazi/ex3.cpp
*/

/*!
\page anasazi_ex4

\include anasazi/ex4.cpp
*/

/*!
\page aztecoo_ex1

\include aztecoo/ex1.cpp
*/

/*!
\page aztecoo_ex2

\include aztecoo/ex2.cpp
*/

/*!
\page aztecoo_ex3

\include aztecoo/ex3.cpp
*/

/*!
\page ifpack_ex1

\include ifpack/ex1.cpp
*/

/*!
\page ifpack_ex2

\include ifpack/ex2.cpp
*/

/*!
\page nox_ex1

\include nox/ex1.cpp
*/

/*!
\page nox_ex2

\include nox/ex2.cpp
*/

/*!
\page ml_ex1

\include ml/ex1.cpp
*/

/*!
\page ml_ex2

\include ml/ex2.cpp
*/

/*!
\page triutils_ex1

\include triutils/ex1.cpp
*/

/*!
\page triutils_ex2

\include triutils/ex2.cpp
*/

/*!
\page epetra_ex1

\include epetra/ex1.cpp
*/

/*!
\page epetra_ex2

\include epetra/ex2.cpp
*/
/*!
\page epetra_ex3

\include epetra/ex3.cpp
*/
/*!
\page epetra_ex4

\include epetra/ex4.cpp
*/
/*!
\page epetra_ex5

\include epetra/ex5.cpp
*/
/*!
\page epetra_ex6

\include epetra/ex6.cpp
*/
/*!
\page epetra_ex7

\include epetra/ex7.cpp
*/
/*!
\page epetra_ex8

\include epetra/ex8.cpp
*/
/*!
\page epetra_ex9

\include epetra/ex9.cpp
*/
/*!
\page epetra_ex10

\include epetra/ex10.cpp
*/
/*!
\page epetra_ex11

\include epetra/ex11.cpp
*/
/*!
\page epetra_ex12

\include epetra/ex12.cpp
*/
/*!
\page epetra_ex13

\include epetra/ex13.cpp
*/
/*!
\page epetra_ex14

\include epetra/ex14.cpp
*/
/*!
\page epetra_ex15

\include epetra/ex15.cpp
*/
/*!
\page epetra_ex16

\include epetra/ex16.cpp
*/
/*!
\page epetra_ex17

\include epetra/ex1.cpp
*/
/*!
\page epetra_ex18

\include epetra/ex18.cpp
*/
/*!
\page epetra_ex19

\include epetra/ex19.cpp
*/
/*!
\page epetra_ex20

\include epetra/ex20.cpp
*/
/*!
\page epetra_ex21

\include epetra/ex21.cpp
*/
/*!
\page epetra_ex22

\include epetra/ex22.cpp
*/

/*!
\page epetra_ex23

\include epetra/ex23.cpp
*/

/*!
\page epetra_ex24

\include epetra/ex24.cpp
*/

/*!
\page epetra_ex25

\include epetra/ex25.cpp
*/

/*!
\page epetraext_ex1

\include epetraext/ex1.cpp
*/

/*!
\page epetraext_ex2

\include epetraext/ex2.cpp
*/

/*!
\page teuchos_ex1

\include teuchos/ex1.cpp
*/

/*!
\page teuchos_ex2

\include teuchos/ex2.cpp
*/

/*!
\page teuchos_ex3

\include teuchos/ex3.cpp
*/

/*!
\page teuchos_ex4

\include teuchos/ex4.cpp
*/

/*!
\page teuchos_ex5

\include teuchos/ex5.cpp
*/

/*!
\page teuchos_ex6

\include teuchos/ex6.cpp
*/

/*!
\page teuchos_ex7

\include teuchos/ex7.cpp
*/


